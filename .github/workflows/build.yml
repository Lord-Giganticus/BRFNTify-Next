name: Build

on: [push]

# macOS dark mode stuff is based on
# https://github.com/pyinstaller/pyinstaller/issues/4627#issuecomment-609982803
# and the comment linked from there

jobs:
  build:

    strategy:
      matrix:
        include:
          - build-name: 'Windows 8.1+ 64-bit'
            file-name: 'windows-64'
            python-version: 3.9
            platform: windows-latest
            arch: 'x64'
            macos-custom-python: false
            force-pyqt-5132: false
          - build-name: 'Windows 8.1+ 32-bit'
            file-name: 'windows-32'
            python-version: 3.9
            platform: windows-latest
            arch: 'x86'
            macos-custom-python: false
            force-pyqt-5132: false
          - build-name: 'Windows 7'
            file-name: 'windows7'
            python-version: 3.8
            platform: windows-latest
            arch: 'x86'
            macos-custom-python: false
            force-pyqt-5132: false
          - build-name: 'macOS High Sierra'
            file-name: 'macos-high-sierra'
            python-version: 3.9
            platform: macos-latest
            arch: 'x64'
            macos-custom-python: true
            force-pyqt-5132: false
          - build-name: 'macOS Sierra'
            file-name: 'macos-sierra'
            python-version: 3.9
            platform: macos-latest
            arch: 'x64'
            macos-custom-python: false
            force-pyqt-5132: true
          - build-name: 'Ubuntu'
            file-name: 'ubuntu'
            python-version: 3.9
            platform: ubuntu-latest
            arch: 'x64'
            macos-custom-python: false
            force-pyqt-5132: false

    name: ${{ matrix.build-name }}

    runs-on: ${{ matrix.platform }}

    env:
      custom-python-version: 3.9  # Don't forget to also change the matrix "python-version" number above!
      custom-python-version-full: 3.9.2

    steps:
    - name: Set environment variables (Windows / Linux / Sierra)
      if: ${{ runner.os == 'Windows' || runner.os == 'Linux' || !matrix.macos-custom-python }}
      shell: bash
      run: echo "PYTHON_CMD=python" >> $GITHUB_ENV
    - name: Set environment variables (macOS latest)
      if: ${{ matrix.macos-custom-python }}
      run: echo "PYTHON_CMD=./python3" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Cache Python build (macOS latest)
      id: caching
      if: ${{ matrix.macos-custom-python }}
      uses: actions/cache@v2
      with:
        path: |
          ./python
          ./python-framework
          ~/Library/Python/${{ env.custom-python-version }}
        key: macos-python-${{ env.custom-python-version-full }}
    - name: Download Python (macOS latest, cache miss)
      if: ${{ matrix.macos-custom-python && !steps.caching.outputs.cache-hit }}
      run: |
        # Do all this in a "python" subfolder
        mkdir python && cd python
        # Download Python source and unzip into /src subfolder
        curl -o Python.tar.xz https://www.python.org/ftp/python/${{ env.custom-python-version-full }}/Python-${{ env.custom-python-version-full }}.tar.xz
        mkdir src
        tar -xf Python.tar.xz -C ./src
        # All the source code is annoyingly in e.g. /src/Python-3.9.0/ or similar, so let's
        # move it all up by two directories in a subfolder-name-agnostic way
        cd src
        cd *
        mv ./* ../../
    - name: Build Python (macOS latest, cache miss)
      if: ${{ matrix.macos-custom-python && !steps.caching.outputs.cache-hit }}
      run: |
        cd python
        mkdir build
        brew install openssl
        export MACOSX_DEPLOYMENT_TARGET=10.13
        ./configure --enable-optimizations --enable-framework --with-openssl=$(brew --prefix openssl) "--prefix=$(pwd)/build"
        make -j2
        sudo make install
        cd ..
    - name: Copy Python for caching (macOS latest, cache miss)
      if: ${{ matrix.macos-custom-python && !steps.caching.outputs.cache-hit }}
      run: cp -r /Library/Frameworks/Python.framework/Versions/${{ env.custom-python-version }} ./python-framework
    - name: Un-copy Python from cache (macOS latest, cache hit)
      if: ${{ matrix.macos-custom-python && steps.caching.outputs.cache-hit }}
      run: |
        sudo mkdir -p /Library/Frameworks/Python.framework
        sudo mkdir -p /Library/Frameworks/Python.framework/Versions
        sudo cp -r ./python-framework /Library/Frameworks/Python.framework/Versions/${{ env.custom-python-version }}
    - name: Make Python symlink (macOS latest)
      if: ${{ matrix.macos-custom-python }}
      run: ln -s ./python/build/bin/python3 ./python3
    - name: Set up Python (Windows / Linux / Sierra)
      if: ${{ !matrix.macos-custom-python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}
    - name: Install dependencies other than PyInstaller and PyQt5
      shell: bash
      run: |
        $PYTHON_CMD -m pip install --upgrade pip
        $PYTHON_CMD -m pip install wheel
        $PYTHON_CMD -m pip install nsmblib
    - name: Install PyQt5 latest (Windows / Linux / macOS latest)
      if: ${{ !matrix.force-pyqt-5132 }}
      shell: bash
      run: |
        $PYTHON_CMD -m pip install PyQt5
    - name: Install PyQt5 5.13.2 (Sierra)
      if: ${{ matrix.force-pyqt-5132 }}
      shell: bash
      run: |
        $PYTHON_CMD -m pip install PyQt5==5.13.2
    - name: Install PyInstaller (Windows / Linux / Sierra)
      if: ${{ !matrix.macos-custom-python }}
      shell: bash
      run: |
        $PYTHON_CMD -m pip install PyInstaller
    - name: Build and install PyInstaller (macOS latest, cache miss)
      if: ${{ matrix.macos-custom-python && !steps.caching.outputs.cache-hit }}
      run: |
        git clone https://github.com/pyinstaller/pyinstaller
        cd pyinstaller/bootloader
        export MACOSX_DEPLOYMENT_TARGET=10.13
        export CFLAGS=-mmacosx-version-min=10.13
        export CPPFLAGS=-mmacosx-version-min=10.13
        export LDFLAGS=-mmacosx-version-min=10.13
        export LINKFLAGS=-mmacosx-version-min=10.13
        ../.././python3 ./waf all
        cd ..
        .././python3 -m pip install .
    - name: Build
      shell: bash
      run: $PYTHON_CMD -OO build_release.py
    - name: Tar (macOS / Linux)
      if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
      run: |
        cd distrib
        tar -czvf ../build-${{ matrix.file-name }}.tar.gz ./*
        cd ..
    - name: Upload artifacts (Windows)
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.file-name }}
        path: distrib/*
    - name: Upload artifacts (macOS / Linux)
      if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.file-name }}
        path: ${{ matrix.file-name }}.tar.gz
